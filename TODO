* TODO

- Task pool should have "schedule" function.

- The "schedule" invocation should wake up threads waiting in the
  "execute" function.

* DONE

- Add a private interface to get the current task pool.

  Since tasks are always tied to a task-pool, if a _current_ task
  wants to switch to another task-pool, it has to store the current
  task-pool in its stack so that it can come back to it later. This is
  crucial for implementing asynchronous operations.

  The "waiting_link" member of the task structure cannot be used for
  this purpose because "waiting_link" is not guaranteed to link only
  to the task-pools (mutexes, semaphres, sleep etc. may use it)

  When current task_pool is returned, no reference is taken on the
  task-pool. Since this is a private interface, we are expected to
  handle this as necessary.

- Task pool should have "execute" function.

  It is unnecessary to implement the task-pool execution loop in every
  test case. Having this method as part of the library simplifies the
  testcases. Also, this makes using libtask library less error prone.

- Every task should have a owner task-pool.

  Supporting tasks without an associated task-pool is not a frequent
  case. Besides, creating a task-pool and adding a task to it doesn't
  cost anything, so lets drop support for independent tasks.
